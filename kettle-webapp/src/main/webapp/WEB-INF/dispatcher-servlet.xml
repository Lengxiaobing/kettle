<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop
	   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context-3.0.xsd
	   http://www.springframework.org/schema/mvc
	   http://www.springframework.org/schema/mvc/spring-mvc.xsd
	   http://www.springframework.org/schema/tx
	   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <context:component-scan base-package="org.kettle.webapp"/>

    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
                <property name="objectMapper" ref="dateMapper"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <bean id="dateMapper" class="org.kettle.webapp.utils.DateMapper"/>

    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.Exception">/exception.jsp</prop>
            </props>
        </property>
        <property name="statusCodes">
            <props>
                <prop key="errors/error">500</prop>
                <prop key="errors/404">404</prop>
            </props>
        </property>
        <!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->
        <property name="warnLogCategory" value="WARN"/>
        <!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 -->
        <property name="defaultErrorView" value="errors/error"/>
        <!-- 默认HTTP状态码 -->
        <property name="defaultStatusCode" value="500"/>
    </bean>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 80M -->
        <property name="maxUploadSize" value="83886080"/>
    </bean>

    <import resource="classpath*:org/kettle/container-*.xml"/>
    <import resource="classpath*:org/kettle/sxdata/container-*.xml"/>

    <!-- Spring使用DBCP连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <!-- 数据库连接配置   hadoop-->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <!--  本地-->
        <property name="url"
                  value="jdbc:mysql://127.0.0.1:3306/kettle?useUnicode=true&amp;characterEncoding=utf8&amp;characterSetResults=utf8&amp;autoReconnect=true&amp;useSSL=true"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>

        <!-- validate配置，重连配置 -->
        <!-- 默认值是 false, 当连接池中的空闲连接是否有效 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 默认值是 true ，当从连接池取连接时，验证这个连接是否有效 -->
        <property name="testOnBorrow" value="true"/>
        <!-- 默认值是 flase, 当从把该连接放回到连接池的时，验证这个连接是否有效 -->
        <property name="testOnReturn" value="false"/>
        <!-- 验证连接是否成功, SQL SELECT 指令至少要返回一行 -->
        <property name="validationQuery" value="SELECT 1"/>
        <!-- 在执行检查时超时设置，通过statement 设置，statement.setQueryTimeout(validationQueryTimeout)  -->
        <property name="validationQueryTimeout" value="1"/>
        <!-- 默认值是 -1 ，每隔一段多少毫秒跑一次回收空闲线程的线程 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 默认值是 3 ，每次验证空闲连接的连接数目 -->
        <property name="numTestsPerEvictionRun" value="3"/>
    </bean>

    <!-- spring集成MyBatis3 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mappings/*.xml"/>
    </bean>

    <!-- 事务配置 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:advice id="tx" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>
            <tx:method name="create*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="remove*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="assigned*" propagation="REQUIRED" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut
                expression="(execution(* org.kettle..ServiceImpl*.*(..))) or (execution(* org.kettle.sxdata.service.impl..*(..)))"
                id="pc"/>
        <aop:advisor advice-ref="tx" pointcut-ref="pc"/>
    </aop:config>

    <!-- 结束事务配置-->
    <!--     <mvc:interceptors> -->
    <!--     	<mvc:interceptor> -->
    <!--     		<mvc:mapping path="/**/*.do"/> -->
    <!--     		<mvc:exclude-mapping path="/repository/types.do"/> -->
    <!--     		<mvc:exclude-mapping path="/repository/list.do"/> -->
    <!--     		<mvc:exclude-mapping path="/repository/login.do"/> -->
    <!--     		<bean class="org.kettle.webapp.listener.LoginInterceptor" /> -->
    <!--     	</mvc:interceptor> -->
    <!--     </mvc:interceptors> -->

    <!-- spring集成quartz -->
    <!-- 使用MethodInvokingJobDetailFactoryBean，任务类可以不实现Job接口，通过targetMethod指定调用方法 -->
    <bean class="org.kettle.sxdata.util.quartz.SlaveQuota" id="slaveQuartz"/>
    <bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="group" value="job_work"/>
        <property name="name" value="job_work_name"/>
        <!-- &false表示等上一个任务执行完后再开启新的任务 -->
        <property name="concurrent" value="false"/>
        <property name="targetObject">
            <ref bean="slaveQuartz"/>
        </property>
        <property name="targetMethod">
            <value>quotaSlaveInfoRepeat</value>
        </property>
    </bean>
    <!-- 配置 Quartz 调度时使用的触发器 -->
    <bean id="myTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="name" value="work_default_name"/>
        <property name="group" value="work_default"/>
        <!-- 引用自上面配置好的jobDetail 这样就会根据自定义的时间规则调度目标方法 -->
        <property name="jobDetail">
            <ref bean="jobDetail"/>
        </property>
        <property name="cronExpression">
            <value>0/1 * * * * ?</value>
        </property>
    </bean>
    <!-- 调度工厂  * 0/30 * * * ?  0/5 * * * * ? -->
    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="myTrigger"/>
            </list>
        </property>
    </bean>
</beans>